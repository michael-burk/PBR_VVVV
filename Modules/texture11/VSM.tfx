//@author: vux
//@help: template for texture fx
//@tags: texture
//@credits: 

Texture2D texture2d : PREVIOUS;

SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};

float2 doMoments(float Depth){
	float2 Moments;
	// First moment is the depth itself.  
	Moments.x = Depth;
	// Compute partial derivatives of depth.  
	float dx = ddx(Depth);
	float dy = ddy(Depth);
	// Compute second moment over the pixel extents.  
	Moments.y = Depth*Depth + 0.25*(dx*dx + dy*dy);
	return Moments;
};


float2 PS(psInput input) : SV_Target
{
	float c = texture2d.Sample(linearSampler,input.uv).r;
	return doMoments(c) ;
}

technique10 Process
{
	pass P0 < bool mips=true; string format="R32G32_Float"; >
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}
}